#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

const compile = require('./compile');
const generate = require('./generate/generate');
const init = require('./init');
const program = require('commander');
const render = require('./render');
const serve = require('./serve');
const utils = require('./utils');

program.Command.prototype._outputHelp = program.Command.prototype.outputHelp;
program.Command.prototype.outputHelp = function() {
  return this._outputHelp(utils.colorizeCommanderHelpText);
};

program
  .command('new')
  .description('Turns <dirname> into a nin project')
  .arguments('<dirname>', 'Where to create the new project')
  .action(dirname => init.init(dirname));

program
  .command('compile')
  .description('Compile the nin project')
  .option('--no-png-compression', 'Do not use the .png.html compression trick')
  .action(options => compile.compile(utils.findProjectRootOrExit(process.cwd()), {
    pngCompress: options.pngCompression
  }));

program
  .command('run [port]')
  .description('Run the backend project')
  .action(port => serve.serve(utils.findProjectRootOrExit(process.cwd()), port));

program
  .command('render')
  .description('Render recorded pngs to a video file')
  .action(() => render.render(utils.findProjectRootOrExit(process.cwd())));

program
  .command('generate [resource] [name]')
  .description('Generate resources')
  .action((resource, name) => {
    const projectRoot = utils.findProjectRootOrExit(process.cwd());
    generate.generate(projectRoot, resource, name);
  });

const result = program.parse(process.argv);

if(typeof result.args[0] != 'object') {
  program.outputHelp();
}
