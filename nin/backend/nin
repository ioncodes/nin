#!/usr/bin/env node

var program = require('commander');
var fs = require('fs');
var path = require('path');

var compile  = require('./compile'),
    serve    = require('./serve'),
    render   = require('./render'),
    generate = require('./generate/generate'),
    utils    = require('./utils');
var init     = require('./init');

program.Command.prototype._outputHelp = program.Command.prototype.outputHelp;
program.Command.prototype.outputHelp = function() {
    this._outputHelp(utils.colorizeCommanderHelpText);
};

program
  .command('new')
  .description('Turns <dirname> into a nin project')
  .arguments('<dirname>', 'Where to create the new project')
  .action(function(dirname) {
    init.init(dirname);
  });

program
  .command('compile')
  .description('Compile the nin project')
  .option('--no-png-compression', 'Do not use the .png.html compression trick')
  .action(function(options){
    compile.compile(utils.findProjectRootOrExit(process.cwd()), {
        pngCompress: options.pngCompression
    });
  });

program
  .command('run')
  .description('Run the backend project')
  .action(function() {
    serve.serve(utils.findProjectRootOrExit(process.cwd()));
  });

program
  .command('render')
  .description('Render recorded pngs to a video file')
  .action(function(project) {
    render.render(utils.findProjectRootOrExit(process.cwd()));
  });

program
  .command('generate [resource] [name]')
  .description('Generate resources')
  .action(function(resource, name) {
    var projectRoot = utils.findProjectRootOrExit(process.cwd());
    generate.generate(projectRoot, resource, name);
  });

const result = program.parse(process.argv);

if(typeof result.args[0] != 'object') {
  program.outputHelp();
}
